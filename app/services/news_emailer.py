import os, ssl, smtplib, html, asyncio, logging, pathlib
from datetime import datetime
from dateutil import tz
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from playwright.async_api import async_playwright
import traceback
from app.parser.news_parser import parse_news_content
from app.generate_image import make_post_image
from app.config import (
    EMAIL_HOST, EMAIL_PORT, EMAIL_USERNAME, EMAIL_PASSWORD,
    EMAIL_FROM, EMAIL_TO
)


HERE = pathlib.Path(__file__).resolve().parent
TEMPLATES_DIR = HERE / "templates"
OUTPUT_DIR = HERE / "output"
OUTPUT_DIR.mkdir(exist_ok=True)


# -----------------------------
# Generate post image
# -----------------------------
async def render_post_html_to_image(html_content, output_path):
    async with async_playwright() as pw:
        browser = await pw.chromium.launch(headless=True)
        page = await browser.new_page(viewport={"width": 1080, "height": 1350})
        await page.set_content(html_content)
        await page.screenshot(path=str(output_path), type="jpeg", quality=90)
        await browser.close()


# -----------------------------
# Generate email body
# -----------------------------
def generate_email_body(news_items, model_name=None):
    """Return HTML + plain text blocks for all items"""
    html_content = ""

    for idx, news_item in enumerate(news_items, 1):
        title = news_item.get("title", "No Title")
        comment = news_item.get("comment", "")
        hashtags = news_item.get("hashtags", "")
        source = news_item.get("source", "Generated by AI")
        if model_name:
            source = f"Generated by AI (LLM model: {model_name})"

        html_content += f"""
        <div class="news-item" style="margin-bottom:20px;">
          <div class="title" style="font-weight:bold;font-size:18px;">{title}</div>
          <div class="comment" style="margin:8px 0;"><pre>{comment}</pre></div>
          <div class="hashtags" style="color:#555;">{hashtags}</div>
          <div class="source" style="font-size:12px;color:#888;">Source: {source}</div>
        </div>
        <hr>
        """


    return html_content


# -----------------------------
# Send ONE email with all items + attachments
# -----------------------------
def send_email(raw_content, model_name=None):
    news_items = parse_news_content(raw_content)
    if not news_items:
        return

    # Generate unique subject with IST datetime
    now_utc = datetime.utcnow().replace(tzinfo=tz.UTC)
    ist_time = now_utc.astimezone(tz.gettz("Asia/Kolkata"))
    subject = f"AI News Digest - {ist_time.strftime('%d %b %Y, %I:%M %p IST')}"

    # Generate post images for all items
    attachments = []
    for item in news_items:
        try:
            title = item["title"] or f"theaipoint post"
            pov   = item["pov"] or "Why it matters for you."
            imgs  = item["images"] or []  # generate_image has a dark fallback
            tags  = item["hashtags"] or ""
            img_path = make_post_image(title=title,
                    pov=pov,
                    image_urls=imgs,
                    hashtags=tags,
                    model_name=model_name,
                    category="trending"
                    )
            attachments.append(img_path)
            logging.info(f"‚úÖ Generated post image: {img_path}")
        except Exception as e:
            traceback.print_exc()
            logging.warning(f"‚ö†Ô∏è Could not generate image for item {item.get('title')}: {e}")

    

    # Load template
    try:
        template_path = os.path.join(os.path.dirname(__file__), '..', 'templates', 'email_template.html')
        with open(template_path, 'r', encoding='utf-8') as f:
            html_template = f.read()
        logging.info("Successfully loaded email template.")
    except FileNotFoundError:
        logging.error(f"email_template.html not found at {template_path}. Using plain text only.")
        html_template = ""

    # Email body
    html_body = generate_email_body(news_items, model_name)

    final_html = html_template.replace("{{news_items}}", html_body) if html_template else html_body

    # Build message
    message = MIMEMultipart()
    message["Subject"] = subject
    message["From"] = EMAIL_FROM
    message["To"] = ", ".join(EMAIL_TO)

    message.attach(MIMEText(final_html, "html", "utf-8"))

    # Attach all post images
    for file_path in attachments:
        try:
            with open(file_path, "rb") as f:
                part = MIMEBase("application", "octet-stream")
                part.set_payload(f.read())
            encoders.encode_base64(part)
            part.add_header("Content-Disposition", f"attachment; filename={os.path.basename(file_path)}")
            message.attach(part)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Could not attach {file_path}: {e}")

    # Send email
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL(EMAIL_HOST, EMAIL_PORT, context=context) as server:
        server.login(EMAIL_USERNAME, EMAIL_PASSWORD)
        server.sendmail(EMAIL_FROM, EMAIL_TO, message.as_string())

    logging.info(f"üìß Email sent successfully with subject '{subject}' and {len(attachments)} attachments")