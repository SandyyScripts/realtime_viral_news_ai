import os, logging, ssl, smtplib, html
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from app.parsers.news_parser import parse_news_content
from app.config import EMAIL_HOST, EMAIL_PORT, EMAIL_USERNAME, EMAIL_PASSWORD, EMAIL_FROM, EMAIL_TO

def generate_email_body(news_items, model_name=None):
    html_content, plain_text_content = "", ""

    for idx, item in enumerate(news_items, 1):
        title = item.get("title", "No Title")
        comment = item.get("comment", "")
        images = item.get("images", [])
        hashtags = item.get("hashtags", "")
        source = item.get("source", "Generated by AI")
        if model_name:
            source = f"Generated by AI (LLM model: {model_name})"

        html_content += f"""
        <div class="news-item">
          <div class="title">{title}</div>
          <div class="comment"><pre>{comment}</pre></div>
          {"".join([f'<a href="{html.escape(u)}" target="_blank">Image {j+1}</a><br>' for j,u in enumerate(images)])}
          <div class="hashtags">{hashtags}</div>
          <div class="source">Source: {source}</div>
        </div>
        """

        plain_text_content += f"""
Title: {html.unescape(title)}
Comment: {html.unescape(comment)}
Images: {" ".join(images)}
Hashtags: {html.unescape(hashtags)}
Source: {source}
---
"""

    return html_content, plain_text_content

def send_email(subject, raw_content, model_name=None):
    items = parse_news_content(raw_content)
    if not items: return

    html_body, plain_text_body = generate_email_body(items, model_name)

    # Load template
    template_path = os.path.join(os.path.dirname(__file__), "..", "templates", "email_template.html")
    with open(template_path, "r", encoding="utf-8") as f:
        template = f.read()
    final_html = template.replace("{{news_items}}", html_body)

    message = MIMEMultipart("alternative")
    message["Subject"] = subject
    message["From"] = EMAIL_FROM
    message["To"] = ", ".join(EMAIL_TO)

    message.attach(MIMEText(plain_text_body, "plain", "utf-8"))
    message.attach(MIMEText(final_html, "html", "utf-8"))

    context = ssl.create_default_context()
    with smtplib.SMTP_SSL(EMAIL_HOST, EMAIL_PORT, context=context) as server:
        server.login(EMAIL_USERNAME, EMAIL_PASSWORD)
        server.sendmail(EMAIL_FROM, EMAIL_TO, message.as_string())